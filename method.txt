
  const handleRefreshData = () => {
    fetchActivityLogData();
  };
refreshData
Administrator
 const { userDetails } = useAuth();
const { activity_id, activity_username, activity_roleName } = req.body;

import { ActionDescriptions, ActionTypes } from "../../helpers/activityLog.js";
import { logActivity } from "../useExtraSystem.js";

activity_id: userDetails.userId,
activity_username: userDetails.username,
activity_roleName: userDetails.roleName,

activity_id, activity_username, activity_roleName,


  const actionType = ActionTypes.USER_MANAGEMENT;
    const actionDescription = ActionDescriptions[actionType].ADD_USER(
      activity_username,
      username
    );

    await logActivity(
      connection,
      activity_id,
      activity_roleName,
      actionType,
      actionDescription
    );


    const activityData = {
        activity_id: userDetails.userId,
        activity_username: userDetails.username,
        activity_roleName: userDetails.roleName,
      }
      
      const {
    activity_id,
    activity_username,
    activity_roleName,
  } = req.body;;





  PERMISSION
  disabled={!userDetails?.permissions?.canRead}
  disabled={!userDetails?.permissions?.canWrite}
  disabled={!userDetails?.permissions?.canEdit}
  disabled={!userDetails?.permissions?.canDelete}

   useEffect(() => {
    if (getData) {
      setItemName(getData.item_name || "");
      setItemPrice(getData.price || "");
      setSelectedCategory(getData.category_id);
      setSelectedStatus(getData.isStatus);
    } else {
      setItemName("");
      setItemPrice("");
      setSelectedCategory("");
      setSelectedStatus("");
    }
  }, [getData]);








  // FOR NOTIFICATIONS

  import { io, userSockets } from "../../socket/socket.js";
import { logNotification } from "../useExtraSystem.js";
import {
  NotificationDescriptions,
  NotificationStatus,
} from "../../helpers/notificationLog.js";


    const getCustomerIdQuery = `
      SELECT customer_id 
      FROM Service_Request 
      WHERE id = ?
    `;
    const [customerRows] = await connection.execute(getCustomerIdQuery, [id]);

    if (customerRows.length === 0) {
      return res
        .status(404)
        .json({ success: false, message: "Request not found." });
    }

    const { customer_id } = customerRows[0];


    // GET ASSIGN PICKUP STAFF
    const getFullNameQuery = `
      SELECT CONCAT(first_name, ' ', COALESCE(middle_name, ''), ' ', last_name) AS full_name
      FROM User_Account
      WHERE id = ?
    `;
    const [userRows] = await connection.execute(getFullNameQuery, [user_id]);

    if (userRows.length === 0) {
      return res
        .status(404)
        .json({ success: false, message: "User not found." });
    }

    const { full_name } = userRows[0];


        // Log notification
    const notificationType = NotificationStatus.CANCELED;
    const notificationDescription =
    NotificationDescriptions[notificationType]();

    await logNotification(
      connection,
      null,
      customer_id,
      notificationType,
      notificationDescription
    );

     for (const userId in userSockets) {
      const userSocket = userSockets[userId];

      if (
        userSocket.userId === customer_id &&
        userSocket.userType == "Customer"
      ) {
        io.to(userSocket.socketId).emit("notificationsModule", {
          title: notificationType,
          message: notificationDescription,
        });
      }
    }

notificationsModuleForCustomer